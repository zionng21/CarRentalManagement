@page "/makes/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Makes</h3>
<br />
@if (Makes == null)
{
	<div class="alert alert-info">Loading Makes...</div>
}
else
{
	<table class="table table-responsive">
		<thead>
			<tr>
				<th>Name</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var make in Makes)
			{
				<tr>
					<td>@make.Name</td>
					<td>
						<a href="/makes/view/@make.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<a href="/makes/edit/@make.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>	
						</a>
						<button class="btn btn-danger" @onclick="@(()=>Delete(make.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<Make>? Makes;

	protected async override Task OnInitializedAsync()
	{
		Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
	}

	async Task Delete(int makeId)
	{
		if(Makes != null)
		{
			var make = Makes.First(q => q.Id == makeId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {make.Name}?");
			if (confirm)
			{
				await _client.DeleteAsync($"api/makes/{makeId}");
				await OnInitializedAsync();
			}
		}
	}

}
